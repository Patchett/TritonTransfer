/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TritonTransfer_H
#define TritonTransfer_H

#include <thrift/TDispatchProcessor.h>
#include "TritonTransfer_types.h"

namespace no { namespace podcasts { namespace no { namespace learning {

class TritonTransferIf {
 public:
  virtual ~TritonTransferIf() {}
  virtual void ping() = 0;
  virtual void uploadFile(std::vector<ServerInfo> & _return, const std::string& file_name, const std::vector<HashValue> & hash_list) = 0;
  virtual void uploadBlock(std::string& _return, const HashValue& hv, const Block& block) = 0;
  virtual void downloadFile(std::vector<ServerInfo> & _return, const std::string& file_name) = 0;
  virtual void downloadBlock(ErrorOrBlock& _return, const HashValue& hv) = 0;
  virtual void bootstrapBlockServer(const int32_t port, const ServerAddr& server_addr) = 0;
};

class TritonTransferIfFactory {
 public:
  typedef TritonTransferIf Handler;

  virtual ~TritonTransferIfFactory() {}

  virtual TritonTransferIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TritonTransferIf* /* handler */) = 0;
};

class TritonTransferIfSingletonFactory : virtual public TritonTransferIfFactory {
 public:
  TritonTransferIfSingletonFactory(const boost::shared_ptr<TritonTransferIf>& iface) : iface_(iface) {}
  virtual ~TritonTransferIfSingletonFactory() {}

  virtual TritonTransferIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TritonTransferIf* /* handler */) {}

 protected:
  boost::shared_ptr<TritonTransferIf> iface_;
};

class TritonTransferNull : virtual public TritonTransferIf {
 public:
  virtual ~TritonTransferNull() {}
  void ping() {
    return;
  }
  void uploadFile(std::vector<ServerInfo> & /* _return */, const std::string& /* file_name */, const std::vector<HashValue> & /* hash_list */) {
    return;
  }
  void uploadBlock(std::string& /* _return */, const HashValue& /* hv */, const Block& /* block */) {
    return;
  }
  void downloadFile(std::vector<ServerInfo> & /* _return */, const std::string& /* file_name */) {
    return;
  }
  void downloadBlock(ErrorOrBlock& /* _return */, const HashValue& /* hv */) {
    return;
  }
  void bootstrapBlockServer(const int32_t /* port */, const ServerAddr& /* server_addr */) {
    return;
  }
};


class TritonTransfer_ping_args {
 public:

  TritonTransfer_ping_args() {
  }

  virtual ~TritonTransfer_ping_args() throw() {}


  bool operator == (const TritonTransfer_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TritonTransfer_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TritonTransfer_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TritonTransfer_ping_pargs {
 public:


  virtual ~TritonTransfer_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TritonTransfer_ping_result {
 public:

  TritonTransfer_ping_result() {
  }

  virtual ~TritonTransfer_ping_result() throw() {}


  bool operator == (const TritonTransfer_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TritonTransfer_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TritonTransfer_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TritonTransfer_ping_presult {
 public:


  virtual ~TritonTransfer_ping_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TritonTransfer_uploadFile_args__isset {
  _TritonTransfer_uploadFile_args__isset() : file_name(false), hash_list(false) {}
  bool file_name;
  bool hash_list;
} _TritonTransfer_uploadFile_args__isset;

class TritonTransfer_uploadFile_args {
 public:

  TritonTransfer_uploadFile_args() : file_name() {
  }

  virtual ~TritonTransfer_uploadFile_args() throw() {}

  std::string file_name;
  std::vector<HashValue>  hash_list;

  _TritonTransfer_uploadFile_args__isset __isset;

  void __set_file_name(const std::string& val) {
    file_name = val;
  }

  void __set_hash_list(const std::vector<HashValue> & val) {
    hash_list = val;
  }

  bool operator == (const TritonTransfer_uploadFile_args & rhs) const
  {
    if (!(file_name == rhs.file_name))
      return false;
    if (!(hash_list == rhs.hash_list))
      return false;
    return true;
  }
  bool operator != (const TritonTransfer_uploadFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TritonTransfer_uploadFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TritonTransfer_uploadFile_pargs {
 public:


  virtual ~TritonTransfer_uploadFile_pargs() throw() {}

  const std::string* file_name;
  const std::vector<HashValue> * hash_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TritonTransfer_uploadFile_result__isset {
  _TritonTransfer_uploadFile_result__isset() : success(false) {}
  bool success;
} _TritonTransfer_uploadFile_result__isset;

class TritonTransfer_uploadFile_result {
 public:

  TritonTransfer_uploadFile_result() {
  }

  virtual ~TritonTransfer_uploadFile_result() throw() {}

  std::vector<ServerInfo>  success;

  _TritonTransfer_uploadFile_result__isset __isset;

  void __set_success(const std::vector<ServerInfo> & val) {
    success = val;
  }

  bool operator == (const TritonTransfer_uploadFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TritonTransfer_uploadFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TritonTransfer_uploadFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TritonTransfer_uploadFile_presult__isset {
  _TritonTransfer_uploadFile_presult__isset() : success(false) {}
  bool success;
} _TritonTransfer_uploadFile_presult__isset;

class TritonTransfer_uploadFile_presult {
 public:


  virtual ~TritonTransfer_uploadFile_presult() throw() {}

  std::vector<ServerInfo> * success;

  _TritonTransfer_uploadFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TritonTransfer_uploadBlock_args__isset {
  _TritonTransfer_uploadBlock_args__isset() : hv(false), block(false) {}
  bool hv;
  bool block;
} _TritonTransfer_uploadBlock_args__isset;

class TritonTransfer_uploadBlock_args {
 public:

  TritonTransfer_uploadBlock_args() : hv(), block() {
  }

  virtual ~TritonTransfer_uploadBlock_args() throw() {}

  HashValue hv;
  Block block;

  _TritonTransfer_uploadBlock_args__isset __isset;

  void __set_hv(const HashValue& val) {
    hv = val;
  }

  void __set_block(const Block& val) {
    block = val;
  }

  bool operator == (const TritonTransfer_uploadBlock_args & rhs) const
  {
    if (!(hv == rhs.hv))
      return false;
    if (!(block == rhs.block))
      return false;
    return true;
  }
  bool operator != (const TritonTransfer_uploadBlock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TritonTransfer_uploadBlock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TritonTransfer_uploadBlock_pargs {
 public:


  virtual ~TritonTransfer_uploadBlock_pargs() throw() {}

  const HashValue* hv;
  const Block* block;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TritonTransfer_uploadBlock_result__isset {
  _TritonTransfer_uploadBlock_result__isset() : success(false) {}
  bool success;
} _TritonTransfer_uploadBlock_result__isset;

class TritonTransfer_uploadBlock_result {
 public:

  TritonTransfer_uploadBlock_result() : success() {
  }

  virtual ~TritonTransfer_uploadBlock_result() throw() {}

  std::string success;

  _TritonTransfer_uploadBlock_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const TritonTransfer_uploadBlock_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TritonTransfer_uploadBlock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TritonTransfer_uploadBlock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TritonTransfer_uploadBlock_presult__isset {
  _TritonTransfer_uploadBlock_presult__isset() : success(false) {}
  bool success;
} _TritonTransfer_uploadBlock_presult__isset;

class TritonTransfer_uploadBlock_presult {
 public:


  virtual ~TritonTransfer_uploadBlock_presult() throw() {}

  std::string* success;

  _TritonTransfer_uploadBlock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TritonTransfer_downloadFile_args__isset {
  _TritonTransfer_downloadFile_args__isset() : file_name(false) {}
  bool file_name;
} _TritonTransfer_downloadFile_args__isset;

class TritonTransfer_downloadFile_args {
 public:

  TritonTransfer_downloadFile_args() : file_name() {
  }

  virtual ~TritonTransfer_downloadFile_args() throw() {}

  std::string file_name;

  _TritonTransfer_downloadFile_args__isset __isset;

  void __set_file_name(const std::string& val) {
    file_name = val;
  }

  bool operator == (const TritonTransfer_downloadFile_args & rhs) const
  {
    if (!(file_name == rhs.file_name))
      return false;
    return true;
  }
  bool operator != (const TritonTransfer_downloadFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TritonTransfer_downloadFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TritonTransfer_downloadFile_pargs {
 public:


  virtual ~TritonTransfer_downloadFile_pargs() throw() {}

  const std::string* file_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TritonTransfer_downloadFile_result__isset {
  _TritonTransfer_downloadFile_result__isset() : success(false) {}
  bool success;
} _TritonTransfer_downloadFile_result__isset;

class TritonTransfer_downloadFile_result {
 public:

  TritonTransfer_downloadFile_result() {
  }

  virtual ~TritonTransfer_downloadFile_result() throw() {}

  std::vector<ServerInfo>  success;

  _TritonTransfer_downloadFile_result__isset __isset;

  void __set_success(const std::vector<ServerInfo> & val) {
    success = val;
  }

  bool operator == (const TritonTransfer_downloadFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TritonTransfer_downloadFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TritonTransfer_downloadFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TritonTransfer_downloadFile_presult__isset {
  _TritonTransfer_downloadFile_presult__isset() : success(false) {}
  bool success;
} _TritonTransfer_downloadFile_presult__isset;

class TritonTransfer_downloadFile_presult {
 public:


  virtual ~TritonTransfer_downloadFile_presult() throw() {}

  std::vector<ServerInfo> * success;

  _TritonTransfer_downloadFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TritonTransfer_downloadBlock_args__isset {
  _TritonTransfer_downloadBlock_args__isset() : hv(false) {}
  bool hv;
} _TritonTransfer_downloadBlock_args__isset;

class TritonTransfer_downloadBlock_args {
 public:

  TritonTransfer_downloadBlock_args() : hv() {
  }

  virtual ~TritonTransfer_downloadBlock_args() throw() {}

  HashValue hv;

  _TritonTransfer_downloadBlock_args__isset __isset;

  void __set_hv(const HashValue& val) {
    hv = val;
  }

  bool operator == (const TritonTransfer_downloadBlock_args & rhs) const
  {
    if (!(hv == rhs.hv))
      return false;
    return true;
  }
  bool operator != (const TritonTransfer_downloadBlock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TritonTransfer_downloadBlock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TritonTransfer_downloadBlock_pargs {
 public:


  virtual ~TritonTransfer_downloadBlock_pargs() throw() {}

  const HashValue* hv;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TritonTransfer_downloadBlock_result__isset {
  _TritonTransfer_downloadBlock_result__isset() : success(false) {}
  bool success;
} _TritonTransfer_downloadBlock_result__isset;

class TritonTransfer_downloadBlock_result {
 public:

  TritonTransfer_downloadBlock_result() {
  }

  virtual ~TritonTransfer_downloadBlock_result() throw() {}

  ErrorOrBlock success;

  _TritonTransfer_downloadBlock_result__isset __isset;

  void __set_success(const ErrorOrBlock& val) {
    success = val;
  }

  bool operator == (const TritonTransfer_downloadBlock_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TritonTransfer_downloadBlock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TritonTransfer_downloadBlock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TritonTransfer_downloadBlock_presult__isset {
  _TritonTransfer_downloadBlock_presult__isset() : success(false) {}
  bool success;
} _TritonTransfer_downloadBlock_presult__isset;

class TritonTransfer_downloadBlock_presult {
 public:


  virtual ~TritonTransfer_downloadBlock_presult() throw() {}

  ErrorOrBlock* success;

  _TritonTransfer_downloadBlock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TritonTransfer_bootstrapBlockServer_args__isset {
  _TritonTransfer_bootstrapBlockServer_args__isset() : port(false), server_addr(false) {}
  bool port;
  bool server_addr;
} _TritonTransfer_bootstrapBlockServer_args__isset;

class TritonTransfer_bootstrapBlockServer_args {
 public:

  TritonTransfer_bootstrapBlockServer_args() : port(0), server_addr() {
  }

  virtual ~TritonTransfer_bootstrapBlockServer_args() throw() {}

  int32_t port;
  ServerAddr server_addr;

  _TritonTransfer_bootstrapBlockServer_args__isset __isset;

  void __set_port(const int32_t val) {
    port = val;
  }

  void __set_server_addr(const ServerAddr& val) {
    server_addr = val;
  }

  bool operator == (const TritonTransfer_bootstrapBlockServer_args & rhs) const
  {
    if (!(port == rhs.port))
      return false;
    if (!(server_addr == rhs.server_addr))
      return false;
    return true;
  }
  bool operator != (const TritonTransfer_bootstrapBlockServer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TritonTransfer_bootstrapBlockServer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TritonTransfer_bootstrapBlockServer_pargs {
 public:


  virtual ~TritonTransfer_bootstrapBlockServer_pargs() throw() {}

  const int32_t* port;
  const ServerAddr* server_addr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TritonTransfer_bootstrapBlockServer_result {
 public:

  TritonTransfer_bootstrapBlockServer_result() {
  }

  virtual ~TritonTransfer_bootstrapBlockServer_result() throw() {}


  bool operator == (const TritonTransfer_bootstrapBlockServer_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TritonTransfer_bootstrapBlockServer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TritonTransfer_bootstrapBlockServer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TritonTransfer_bootstrapBlockServer_presult {
 public:


  virtual ~TritonTransfer_bootstrapBlockServer_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TritonTransferClient : virtual public TritonTransferIf {
 public:
  TritonTransferClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TritonTransferClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  void uploadFile(std::vector<ServerInfo> & _return, const std::string& file_name, const std::vector<HashValue> & hash_list);
  void send_uploadFile(const std::string& file_name, const std::vector<HashValue> & hash_list);
  void recv_uploadFile(std::vector<ServerInfo> & _return);
  void uploadBlock(std::string& _return, const HashValue& hv, const Block& block);
  void send_uploadBlock(const HashValue& hv, const Block& block);
  void recv_uploadBlock(std::string& _return);
  void downloadFile(std::vector<ServerInfo> & _return, const std::string& file_name);
  void send_downloadFile(const std::string& file_name);
  void recv_downloadFile(std::vector<ServerInfo> & _return);
  void downloadBlock(ErrorOrBlock& _return, const HashValue& hv);
  void send_downloadBlock(const HashValue& hv);
  void recv_downloadBlock(ErrorOrBlock& _return);
  void bootstrapBlockServer(const int32_t port, const ServerAddr& server_addr);
  void send_bootstrapBlockServer(const int32_t port, const ServerAddr& server_addr);
  void recv_bootstrapBlockServer();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TritonTransferProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TritonTransferIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TritonTransferProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_uploadFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_uploadBlock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_downloadFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_downloadBlock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bootstrapBlockServer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TritonTransferProcessor(boost::shared_ptr<TritonTransferIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &TritonTransferProcessor::process_ping;
    processMap_["uploadFile"] = &TritonTransferProcessor::process_uploadFile;
    processMap_["uploadBlock"] = &TritonTransferProcessor::process_uploadBlock;
    processMap_["downloadFile"] = &TritonTransferProcessor::process_downloadFile;
    processMap_["downloadBlock"] = &TritonTransferProcessor::process_downloadBlock;
    processMap_["bootstrapBlockServer"] = &TritonTransferProcessor::process_bootstrapBlockServer;
  }

  virtual ~TritonTransferProcessor() {}
};

class TritonTransferProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TritonTransferProcessorFactory(const ::boost::shared_ptr< TritonTransferIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TritonTransferIfFactory > handlerFactory_;
};

class TritonTransferMultiface : virtual public TritonTransferIf {
 public:
  TritonTransferMultiface(std::vector<boost::shared_ptr<TritonTransferIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TritonTransferMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TritonTransferIf> > ifaces_;
  TritonTransferMultiface() {}
  void add(boost::shared_ptr<TritonTransferIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void uploadFile(std::vector<ServerInfo> & _return, const std::string& file_name, const std::vector<HashValue> & hash_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->uploadFile(_return, file_name, hash_list);
    }
    ifaces_[i]->uploadFile(_return, file_name, hash_list);
    return;
  }

  void uploadBlock(std::string& _return, const HashValue& hv, const Block& block) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->uploadBlock(_return, hv, block);
    }
    ifaces_[i]->uploadBlock(_return, hv, block);
    return;
  }

  void downloadFile(std::vector<ServerInfo> & _return, const std::string& file_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->downloadFile(_return, file_name);
    }
    ifaces_[i]->downloadFile(_return, file_name);
    return;
  }

  void downloadBlock(ErrorOrBlock& _return, const HashValue& hv) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->downloadBlock(_return, hv);
    }
    ifaces_[i]->downloadBlock(_return, hv);
    return;
  }

  void bootstrapBlockServer(const int32_t port, const ServerAddr& server_addr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bootstrapBlockServer(port, server_addr);
    }
    ifaces_[i]->bootstrapBlockServer(port, server_addr);
  }

};

}}}} // namespace

#endif
